# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: CI restaurant
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'debug'
        type: choice
        options:
          - trace
          - debug
          - info
          - warning
          - error
          - fatal
      enable_config_kafka_test:
        description: 'Enable config kafka test'
        required: true
        type: boolean
      enable_monitor_system:
        description: 'Enable monitor system'
        required: true
        type: boolean
      environment:
        description: 'Environment'
        type: environment
        required: true

jobs:
  build:
    runs-on: [ubuntu-latest]
    environment:
      name: ${{inputs.environment}}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Login to docker hub
        run: docker login -u ${{secrets.DOCKERHUB_USERNAME}} -p ${{secrets.DOCKERHUB_ACCESS_TOKEN}}

      - name: Build docker image
        run: |
          docker build \
          --build-arg DB_URL=${{secrets.DB_URL}} \
          --build-arg DB_USERNAME=${{secrets.DB_USERNAME}} \
          --build-arg DB_PASSWORD=${{secrets.DB_PASSWORD}} \
          --build-arg JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}} \
          --build-arg REDIS_HOST=${{secrets.REDIS_HOST}} \
          --build-arg REDIS_PORT=${{secrets.REDIS_PORT}} \
          --build-arg REDIS_USERNAME=${{secrets.REDIS_USERNAME}} \
          --build-arg REDIS_PASSWORD=${{secrets.REDIS_PASSWORD}} \
          --build-arg LOG_IP=${{secrets.LOG_IP}} --build-arg LOG_PORT=${{secrets.LOG_PORT}} --build-arg LOG_LEVEL=${{inputs.logLevel}} \
          --build-arg KAFKA_TEST=${{inputs.enable_config_kafka_test}} \
          --build-arg KAFKA_BOOTSTRAP_SERVER=${{secrets.KAFKA_BOOTSTRAP_SERVER}} \
          --build-arg KAFKA_TEST_USERNAME=${{secrets.KAFKA_TEST_USERNAME}} \
          --build-arg KAFKA_TEST_PASSWORD=${{secrets.KAFKA_TEST_PASSWORD}} \
          --build-arg KAFKA_SASL_JAAS_MODULE=${{KAFKA_SASL_JAAS_MODULE}} \
          --build-arg KAFKA_SASL_MECHANISM=${{KAFKA_SASL_MECHANISM}} \
          --build-arg KAFKA_SECURITY_PROTOCOL=${{KAFKA_SECURITY_PROTOCOL}} \
          --build-arg KAFKA_TRUST_STORE_PASSWORD=${{KAFKA_TRUST_STORE_PASSWORD}} \
          --build-arg ENABLE_MONITOR_SYSTEM=${{inputs.enable_monitor_system}} \
          --build-arg MONITOR_BOT_TOKEN=${{secrets.MONITOR_BOT_TOKEN}} \
          --build-arg MONITOR_BOT_CHAT_ID=${{secrets.MONITOR_BOT_CHAT_ID}} \
          -t ${{secrets.DOCKERHUB_USERNAME}}/restaurant-product-service:first .

      - name: Publish image to docker hub
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/restaurant-product-service:first
#  deploy:
#    needs: build
#    runs-on: [ aws-ec2 ]
#    steps:
#      - name: Pull Image from docker hub
#        run: docker pull ${{secrets.DOCKERHUB_USERNAME}}/restaurent-product-service:first
#
#      - name: Delete old container
#        run: docker rm -f ${{secrets.DOCKERHUB_USERNAME}}/restaurent-product-service:first
#
#      - name: Run docker container
#        run: docker run --network springboot-mysql-net --name restaurent-product-service -p 9001:9001 ${{secrets.DOCKERHUB_USERNAME}}/restaurent-product-service:first
